pipeline {
    agent any

    tools {
        gradle 'gradle-7.6.1'
        jdk 'jdk-17'
    }

    parameters {
        // 배포 환경 선택
        choice(choices: ['dev', 'qa', 'prod'], name: 'PROFILE', description: '배포 환경 선택')
        // DockerHub 사용자명 입력
        string(name: 'DOCKERHUB_USERNAME',  defaultValue: '', description: 'DockerHub 사용자명을 입력하세요.')
        // GitHub  사용자명 입력
        string(name: 'GITHUB_USERNAME',  defaultValue: '', description: 'GitHub  사용자명을 입력하세요.')
    }

    environment {
        // DOCKERHUB_USERNAME = ""
        // GITHUB_USERNAME = ""

        GITHUB_URL = "https://github.com/${GITHUB_USERNAME}/kubernetes-anotherclass-sprint2.git"

        // [2] 잦은 배포 - versioning 무의미, 계획된 배포 - versioning 필수
        // 날짜로 개발환경 롤백도 가능하도록 처리
        APP_VERSION = '1.0.1'
        BUILD_DATE = sh(script: "echo `date +%y%m%d.%H%M%S`", returnStdout: true).trim()

        TAG = "${APP_VERSION}-" + "${BUILD_DATE}"

        // 실습 넘버링
        CLASS_NUM = '2224'
    }

    stages {
        stage('소스파일 체크아웃') {
            steps {
                // 소스코드를 가져올 Github 주소
                git branch: 'main', url: 'https://github.com/k8s-1pro/kubernetes-anotherclass-api-tester.git'
            }
        }

        stage('소스 빌드') {
            steps {
                // 755권한 필요 (윈도우에서 Git으로 소스 업로드시 권한은 644)
                sh "chmod +x ./gradlew"
                sh "gradle clean build"
            }
        }

        stage('릴리즈파일 체크아웃') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                        extensions: [[$class: 'SparseCheckoutPaths',
                                      sparseCheckoutPaths: [[path: "/${CLASS_NUM}"]]]],
                        userRemoteConfigs: [[url: "${GITHUB_URL}"]])
            }
        }

        stage('컨테이너 빌드 및 업로드') {
            steps {
                // jar 파일 복사
                sh "cp ./build/libs/app-0.0.1-SNAPSHOT.jar ./${CLASS_NUM}/build/docker/app-0.0.1-SNAPSHOT.jar"

                script{
                    // 젠킨스 credentials 에서 세팅한 정보로 접속정보로 도커 로그인
                    // 도커 빌드 - [1] 중요 데이터 암호화 관리
                    withCredentials([usernamePassword(credentialsId: 'docker_password', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                        sh "echo " + '${PASSWORD}' + " | docker login -u " + '${USERNAME}' + " --password-stdin"
                    }

                    // 도커 빌드
                    sh "docker build ./${CLASS_NUM}/build/docker -t ${DOCKERHUB_USERNAME}/api-tester:${TAG}"

                    // [2] 잦은 배포 - versioning 무의미, 계획된 배포 - versioning 필수
                    sh "docker push ${DOCKERHUB_USERNAME}/api-tester:${TAG}"

                    // [3] 업로드 후 CI/CD Server에 만들어진 이미지 삭제
                    sh "docker rmi ${DOCKERHUB_USERNAME}/api-tester:${TAG}"
                }
            }
            // 스테이지 종료후 항상 실행
            post {
                always {
                    sh "docker logout"
                }
            }
        }

        // [4] 네임스페이스는 배포와 별도로 관리 ~ 배포시 apply로 Namespace 생성 or 배포와 별개로 미리 생성 (추후 삭제시 별도 삭제)
        stage('네임스페이스 생성') {
            steps {
                // 젠킨스 credentials 에서 세팅한 정보로 접속정보로 k8s 세팅
                // kubectl 명령 사용 - [1] 중요 데이터 암호화 관리
                withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
                    sh "kubectl apply -f ./${CLASS_NUM}/deploy/kubectl/namespace-${params.PROFILE}.yaml --kubeconfig " + '${KUBECONFIG}'
                }
            }
        }

        stage('헬름 배포') {
            steps {
                // helm 명령 사용 - [1] 중요 데이터 암호화 관리
                withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
                    sh "helm upgrade api-tester-${CLASS_NUM} ./${CLASS_NUM}/deploy/helm/api-tester -f ./${CLASS_NUM}/deploy/helm/api-tester/values-${params.PROFILE}.yaml" +
                            " -n anotherclass-222-${params.PROFILE} --install --kubeconfig " + '${KUBECONFIG}' +

                            // [5] Helm 부가기능
                            " --wait --timeout=10m" +   // 최대 10분으로 설정 ~ 문제가 있어 파드가 계속 안뜨면 cicd 서버 리소스 고갈되기에..

                            // [2] 잦은 배포 - versioning 무의미, 계획된 배포 - versioning 필수
                            // 위에서 세팅한 TAG를 동적으로 할당해 넣음
                            " --set image.tag=${TAG}" +
                            " --set image.repository=${DOCKERHUB_USERNAME}/api-tester"
                }
            }
        }
    }
}